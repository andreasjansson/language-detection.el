use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};

// A network
pub enum IpNetwork {
    V4(Ipv4Network),
    V6(Ipv6Network),
}

pub struct Ipv4Network {
    addr: Ipv4Addr,
    prefix: u8,
}

pub struct Ipv6Network {
    addr: Ipv6Addr,
    prefix: u8,
}

impl Ipv4Network {
    fn new(addr: Ipv4Addr, prefix: u8) -> Ipv4Network {
        Ipv4Network { addr:addr, prefix:prefix }
    }
}

impl Ipv6Network {
    fn new(addr: Ipv6Addr, prefix: u8) -> Ipv6Network {
        Ipv6Network { addr:addr, prefix:prefix }
    }
}

impl IpNetwork {
    pub fn new(ip: IpAddr, prefix: u8) -> IpNetwork {
        match ip {
            IpAddr::V4(a) => IpNetwork::V4(a, prefix),
            IpAddr::V6(a) => IpNetwork::V6(a, prefix),
        }
    }
}

fn main() {
    let ip = Ipv4Addr::new(77, 88, 21, 11);
    let cidr = IpNetwork::new(ip, 24);
}