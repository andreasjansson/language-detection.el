/* Send Multicast Datagram code*/
#include <sys/types.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>

#include <stdio.h>
#include <unistd.h>
#include <string.h> /* for strncpy, memset */

#define MAX_MSG 100

struct in_addr localInterface;
struct sockaddr_in groupSock, cliAddr;
int sd, mcastport, maxJoin, maxJoined = 0, pipefd[2], cliLen, cpid;
char msg[MAX_MSG], groupName[MAX_MSG];

int main (int argc, char *argv[ ])
{


    /* check command line args */
    if(argc < 2) {
        printf("usage : %s <port> \n", argv[0]);
        exit(1);
    }

    mcastport = atoi(argv[1]);

    /* Create a datagram socket on which to send. */
    sd = socket(AF_INET, SOCK_DGRAM, 0);
    if(sd < 0)
    {
        perror("Opening datagram socket error");
        exit(1);
    }
    else
        printf("Opening the datagram socket...OK\n");

    /* Initialize the group sockaddr structure with a */
    /* group address of 225.1.1.1 and port given by user. */
    memset((char *) &groupSock, 0, sizeof(groupSock));
    groupSock.sin_family = AF_INET;
    groupSock.sin_addr.s_addr = inet_addr("226.1.1.1");
    groupSock.sin_port = htons(mcastport);

    printf("Create a group: ");
    scanf("%s", groupName);

    printf("Maximum number of clients that can join the group? ");
    scanf("%d", &maxJoin);

    /* Disable loopback so you do not receive your own datagrams.
    {
    char loopch = 0;
    if(setsockopt(sd, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&loopch, sizeof(loopch)) < 0)
    {
    perror("Setting IP_MULTICAST_LOOP error");
    close(sd);
    exit(1);
    }
    else
    printf("Disabling the loopback...OK.\n");
    }
     */

    /* Set local interface for outbound multicast datagrams. */
    /* The IP address specified must be associated with a local, */
    /* multicast capable interface. */
    printf("Setting the local interface...");
    localInterface.s_addr = inet_addr("127.0.0.1");
    if(setsockopt(sd, IPPROTO_IP, IP_MULTICAST_IF, (char *)&localInterface, sizeof(localInterface)) < 0)
    {
        perror("error");
        exit(1);
    }
    else
        printf("OK\n");



    if((cpid = fork()) == 0) //child process --sends messages
    {
        /* Send a message to the multicast group specified by the*/
        /* groupSock sockaddr structure. */
        printf("Enter a message to send: \n");
        scanf("%s", msg);

        if(sendto(sd, msg, strlen(msg)+1, 0, (struct sockaddr*)&groupSock, sizeof(groupSock)) < 0)
        {perror("Sending datagram message error");}
        else
            printf("Sending datagram message...OK\n");

        /* Try the re-read from the socket if the loopback is not disable
        if(read(sd, databuf, datalen) < 0)
        {
        perror("Reading datagram message error\n");
        close(sd);
        exit(1);
        }
        else
        {
        printf("Reading datagram message from client...OK\n");
        printf("The message is: %s\n", databuf);
        }
         */

        exit(EXIT_SUCCESS);
    }
    else //parent process --checks for JOINs and QUITs
    {
        fd_set rfds;
        struct timeval tv;
        int retval, status;

        while (waitpid(cpid, &status, WNOHANG) != cpid)
        {
            /* Watch stdin (fd 0) to see when it has input. */
            FD_ZERO(&rfds);
            FD_SET(sd, &rfds);

            /* Wait up to five seconds. */
            tv.tv_sec = 5;
            tv.tv_usec = 0;

            retval = select(sd+1, &rfds, NULL, NULL, &tv);
            /* Don't rely on the value of tv now! */

            if (retval == -1)
                perror("select()");
            else if (retval != 0)
            {
                printf("Data is available now.\n");
                /* FD_ISSET(0, &rfds) will be true. */

                cliLen = sizeof(cliAddr);
                int n;
                if((n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) &cliAddr,&cliLen)) == -1)
                    perror("Some bullshit happened");
                msg[n] = '\0';

                printf("Client IP:port is: %s:%d", inet_ntoa(cliAddr.sin_addr), (int) ntohs(cliAddr.sin_port));
            } else
            {printf("no data.\n");}
        }
        exit(0);
    }
    return 0;
}